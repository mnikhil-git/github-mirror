#! /usr/bin/perl

use strict;
use warnings;
use Carp;
use Cwd qw/ abs_path getcwd /;
use File::Basename;
use Getopt::Long;
use Config::YAML;
use Net::GitHub;
use POSIX;

my $script_path = abs_path( $0 =~ m|^/| ? $0 : getcwd . "/$0" );
my $script      = basename( $script_path );
my $prefix      = dirname( dirname ( $script_path ) );

my $config      = "$prefix/etc/$script.conf";

GetOptions(
    "config:s"      => \$config,
) or croak;

# Initialize config file if it doesn't exist.
umask(0177);
if( ! -f $config ) {
    sysopen( my $fh, $config, O_WRONLY|O_CREAT|O_EXCL ) or croak( $! );
    close($fh);
}

# Load config
my $cfg = Config::YAML->new(
    config      => $config,
    output      => $config,
); 

umask(0007);
foreach my $src ( @{$cfg->{sources}} ) {
    my @cmd;
    my @output;

    # If the destination exists, make sure it is a clone of
    # the source.
    if( -d $src->{destination} ) {
        chdir( $src->{destination} ) or croak( $! );
        my $url = ( run( qw( git config --get remote.origin.url ) ) )[0] || "";
        chomp( $url );
        if( $url and $url ne $src->{url} ) {
            croak( "$src->{destination} exists, but is not a clone of $src->{url}" );
        }
        @cmd =  qw| git fetch |;
        @output = run( @cmd );
    }
    else {
        if( $src->{mode} eq "mirror" ) {
            @cmd =  ( qw| git clone --mirror --shared |, $src->{url}, $src->{destination} );
        }
        elsif( $src->{mode} eq "clone" ) {
            @cmd =  ( qw| git clone |, $src->{url}, $src->{destination} );
        }
        @output = run( @cmd );
    }
    print join( "\n", @output ) . "\n";
}

sub run {
    open( my $pipe, "-|", @_ ) or croak( $! );
    my @output = ( <$pipe> );
    close( $pipe );
    return( @output );
}
__END__
my $github = Net::GitHub->new(
    owner => $cfg->{owner},
    repo  => "",
);
if( exists( $github->user->show->{"error"} ) ) {
    croak( "$opts->{owner} is not a valid user!" );
}

chdir( $cfg->{directory} ) or croak( $! );
foreach my $repo ( @{$github->repos->show->{repositories}} ) {
    umask(0007);
    my $local_dir = abs_path( "$cfg->{directory}/$repo->{name}.git" );
    my $github_url = "git\@github.com:$cfg->{owner}/$repo->{name}.git";
    my( @cmd, @output ) ;
    print "Mirroring to $local_dir\n";
    if( ! -d $local_dir ) {
        @cmd =  ( qw| git clone --mirror --bare --shared |, $github_url, $local_dir );
        @output = run( @cmd );
        chdir( $local_dir ) or croak( $! );
    }
    else {
        chdir( $local_dir ) or croak( $! );
        my @cmd =  qw| git fetch |;
        @output = run( @cmd );
        print STDOUT join("\n", @output );
    }
    #print Dumper $repo;
}
# git clone --mirror --bare --shared git@github.com:therevmj/puppet-module-software.git

