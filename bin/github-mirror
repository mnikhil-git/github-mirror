#! /usr/bin/perl

use strict;
use warnings;
use Carp;
use Cwd qw/ abs_path getcwd /;
use File::Basename;
use Getopt::Long;
use Config::YAML;
use Net::GitHub;
use POSIX;

my $script_path = abs_path( $0 =~ m|^/| ? $0 : getcwd . "/$0" );
my $script      = basename( $script_path );
my $prefix      = dirname( dirname ( $script_path ) );

my $opts = {
    config => "$prefix/etc/$script.conf",
};

GetOptions( $opts,
    "config|config-file:s",
    "save|save-config",
    "owner:s",
    "directory:s",
);

# Initialize config file if it doesn't exist.
umask(0177);
if( ! -f $opts->{config} ) {
    if( $opts->{save} ) {
        sysopen( my $fh, $opts->{config}, O_WRONLY|O_CREAT|O_EXCL ) or croak( $! );
        close($fh);
    }
    else {
        print "$opts->{config} does not exist.  To create it automatically, pass the --save-config option on the command line.\n";
        exit;
    }
}

# Load config and merge with command line options.
my $cfg = Config::YAML->new(
    config     => $opts->{config},
    output     => $opts->{config},
    owner      => "",
    repository => "",
    directory  => "",
); 
while( my( $key, $value ) = each( %{$opts} ) ) {
    if( $value ) {
        $cfg->{$key} = $value;
    }
}
delete($cfg->{config});
delete($cfg->{save});

# Bailout if we don't have the need settings
if( ! $cfg->{owner} ) {
    print "You must specify the owner in the config or with the command line option --owner.\n";
    exit;
}
if( ! $cfg->{directory} ) {
    print "You must specify the destination directory in the config or with the command line option --directory.\n";
    exit;
}
if( ! -d $cfg->{directory} ) {
    croak( "$cfg->{directory} is not a directory!\n" );
}

# Save the current config if requested.
if( $opts->{save} ) {
    $cfg->write();
}

my $github = Net::GitHub->new(
    owner => $cfg->{owner},
    repo  => $cfg->{repository},
);
if( exists( $github->user->show->{"error"} ) ) {
    croak( "$opts->{owner} is not a valid user!" );
}

chdir( $cfg->{directory} ) or croak( $! );
foreach my $repo ( @{$github->repos->show->{repositories}} ) {
    umask(0007);
    my $local_dir = abs_path( "$cfg->{directory}/$repo->{name}.git" );
    my $github_url = "git\@github.com:$cfg->{owner}/$repo->{name}.git";
    my( @cmd, @output ) ;
    print "Mirroring to $local_dir\n";
    if( ! -d $local_dir ) {
        @cmd =  ( qw| git clone --mirror --bare --shared |, $github_url, $local_dir );
        @output = run( @cmd );
        chdir( $local_dir ) or croak( $! );
        @cmd = ( qw | git remote add origin |, $github_url );
        @output = run( @cmd );
        print STDOUT join("\n", @output );
    }
    else {
        chdir( $local_dir ) or croak( $! );
        my @cmd =  qw| git fetch |;
        @output = run( @cmd );
        print STDOUT join("\n", @output );
    }
    #print Dumper $repo;
}
# git clone --mirror --bare --shared git@github.com:therevmj/puppet-module-software.git

sub run {
    open( my $pipe, "-|", @_ ) or croak( $! );
    my @output = ( <$pipe> );
    close( $pipe );
    return( @output );
}
